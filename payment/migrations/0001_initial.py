# Generated by Django 2.2 on 2019-09-06 06:28

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Groupdescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('groupdescription_vtrefNo', models.PositiveSmallIntegerField()),
                ('groupdescription_client_Name', models.CharField(max_length=20)),
                ('groupdescription_number_of_passengers_paid', models.IntegerField()),
                ('groupdescription_number_of_passengers_free', models.IntegerField()),
                ('groupdescription_number_of_days', models.IntegerField()),
                ('groupdescription_traveling_date', models.DateField()),
                ('groupdescription_volshebny_handle_person', models.CharField(max_length=20)),
                ('groupdescription_client_handle_person', models.CharField(max_length=10)),
                ('groupdescription_booking_date', models.DateField()),
                ('groupdescription_confirmation_date', models.DateField()),
                ('groupdescription_payment_method', models.CharField(max_length=20)),
            ],
            options={
                'verbose_name': 'GroupDescription',
                'verbose_name_plural': 'Group Description Elements',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_quote_per_head', models.CharField(max_length=20)),
                ('service_number_of_passengers', models.IntegerField()),
                ('service_total_amount', models.IntegerField()),
                ('service_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payment.Groupdescription')),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_name', models.CharField(max_length=200)),
                ('vendor_address', models.CharField(max_length=400)),
            ],
        ),
        migrations.CreateModel(
            name='AirTicketsQuatation',
            fields=[
                ('service_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='payment.Service')),
                ('airticket_airline_name', models.CharField(max_length=20)),
                ('airticket_date_and_time_of_depature', models.DateTimeField()),
                ('airticket_date_and_time_of_arrival', models.DateTimeField()),
                ('airticket_booked_from', models.CharField(max_length=20)),
                ('airticket_roe', models.CharField(max_length=20)),
                ('airticket_GST', models.CharField(choices=[('CGST', 'CGST'), ('SGST', 'SGST'), ('GST', 'GST'), ('Not applicable', 'Not applicable')], default='GST', max_length=264)),
            ],
            options={
                'verbose_name': 'Air Ticket',
                'verbose_name_plural': 'Air Ticket Quotation',
            },
            bases=('payment.service',),
        ),
        migrations.CreateModel(
            name='EntrancesQuatation',
            fields=[
                ('service_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='payment.Service')),
                ('entrancesquatation_name', models.CharField(max_length=20)),
            ],
            options={
                'verbose_name': 'Entrances',
                'verbose_name_plural': 'Entrances Quatation',
            },
            bases=('payment.service',),
        ),
        migrations.CreateModel(
            name='HotelQuatation',
            fields=[
                ('service_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='payment.Service')),
                ('hotelquatation_hotel_name', models.CharField(max_length=20)),
                ('hotelquatation_number_of_rooms', models.IntegerField()),
                ('hotelquatation_type_of_room', models.CharField(choices=[('Single Occupancy', 'Single Occupancy'), ('Double Occupancy', 'Double Occupancy'), ('Triple Occupancy', 'Triple Occupancy')], default='Single Occupancy', max_length=20)),
                ('hotelquatation_breakfast_provided', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=264)),
                ('hotelquatation_CGST', models.CharField(choices=[('CGST', 'CGST'), ('SGST', 'SGST'), ('GST', 'GST'), ('Not applicable', 'Not applicable')], default='GST', max_length=264)),
            ],
            options={
                'verbose_name': 'Hotel',
                'verbose_name_plural': 'Hotel Quatation',
            },
            bases=('payment.service',),
        ),
        migrations.CreateModel(
            name='RestaurantQuatation',
            fields=[
                ('service_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='payment.Service')),
                ('restaurantquatation_resturant_name', models.CharField(max_length=20)),
                ('restaurantquatation_For', models.CharField(choices=[('Lunch', 'Lunch'), ('Dinner', 'Dinner')], default='Lunch', max_length=20)),
            ],
            options={
                'verbose_name': 'Resturant',
                'verbose_name_plural': ' Resturant Quatation',
            },
            bases=('payment.service',),
        ),
        migrations.CreateModel(
            name='SapSanQuatation',
            fields=[
                ('service_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='payment.Service')),
                ('sapsanquatation_From_Station', models.CharField(max_length=20)),
                ('sapsanquatation_To_Station', models.CharField(max_length=20)),
            ],
            options={
                'verbose_name': 'SapSan',
                'verbose_name_plural': 'SapSan Quatation',
            },
            bases=('payment.service',),
        ),
        migrations.CreateModel(
            name='VisaCostQuatation',
            fields=[
                ('service_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='payment.Service')),
                ('visacost_visa_letter_cost', models.IntegerField()),
                ('visacost_type_of_Visa', models.CharField(choices=[('Tourist single', 'Tourist single'), ('Tourist Double', 'Tourist Double'), ('Business', 'Business')], default='Tourist single', max_length=264)),
                ('visacost_time_period', models.CharField(choices=[('Normal', 'Normal'), ('Urgent', 'Urgent')], default='Normal', max_length=264)),
                ('visacost_roe', models.CharField(max_length=20)),
                ('visacost_CGST', models.CharField(choices=[('CGST', 'CGST'), ('SGST', 'SGST'), ('GST', 'GST'), ('Not applicable', 'Not applicable')], default='GST', max_length=264)),
            ],
            options={
                'verbose_name': 'Visa Cost',
                'verbose_name_plural': 'Visa Cost Quatation',
            },
            bases=('payment.service',),
        ),
        migrations.AddField(
            model_name='service',
            name='service_vendor_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payment.Vendor'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_role', models.PositiveSmallIntegerField(choices=[(2, 'admin'), (1, 'super_admin')], default=2)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
